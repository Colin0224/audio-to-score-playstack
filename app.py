# app.py ‚Äì "Audio‚Äëto‚ÄëScore PlayStack"
# -------------------------------------------------------------
# A tiny Streamlit app that accepts a YouTube link **or** an audio
# file (MP3/WAV), runs automatic music‚Äëtranscription with Spotify's
# Basic Pitch, prints an optional PDF score, and plays the result.
# -------------------------------------------------------------
# ‚öôÔ∏è  Prerequisites (Linux / macOS / Windows WSL)
#   pip install streamlit basic_pitch music21 pyfluidsynth yt-dlp
#   brew / apt: lilypond fluidsynth
#   Download a GM sound‚Äëfont, e.g. FluidR3_GM.sf2, and put it next to
#   this script or set SOUNDFONT_PATH env var.
# -------------------------------------------------------------
#   Run:  streamlit run app.py
# -------------------------------------------------------------

import os, subprocess, tempfile, uuid, shutil, mimetypes, base64, io
from pathlib import Path

import streamlit as st
from basic_pitch import inference
from music21 import converter
from basic_pitch import ICASSP_2022_MODEL_PATH

# ---------------------------------------------
# Helper functions
# ---------------------------------------------

HERE = Path(__file__).parent
SOUNDFONT = Path(os.getenv("SOUNDFONT_PATH", "FluidR3_GM.sf2"))


def download_youtube(url: str, out_dir: Path) -> Path:
    """Download YouTube audio as WAV using yt‚Äëdlp."""
    wav_path = out_dir / "audio.wav"
    cmd = [
        "yt-dlp",
        "--verbose",  # Added for detailed error logs
        "--legacy-server-connect",  # Fix for SSL handshake issues
        "--no-check-certificates",  # Skip SSL certificate verification
        "--prefer-insecure",  # Use HTTP instead of HTTPS when possible
        "-x",
        "--audio-format",
        "wav",
        url,
        "-o",
        str(wav_path),
    ]
    process = subprocess.run(cmd, check=False, capture_output=True, text=True)
    if process.returncode != 0:
        # Raise an error that includes stdout and stderr
        raise subprocess.CalledProcessError(
            process.returncode, process.args, output=process.stdout, stderr=process.stderr
        )
    return wav_path


def transcribe_audio_to_midi(audio_path: Path, out_dir: Path) -> Path:
    """Run Basic Pitch ‚Üí MIDI file using command line tool."""
    midi_path = out_dir / "transcription.mid"
    
    try:
        # Use basic-pitch command line tool with CoreML for better macOS compatibility
        # Disable pitch bend to avoid scipy.signal.gaussian issues
        cmd = [
            "basic-pitch",
            "--model-serialization", "coreml",  # Force CoreML model
            "--save-midi",  # Explicitly save MIDI
            "--no-pitch-bend",  # Disable pitch bend to avoid scipy issues
            str(out_dir),
            str(audio_path)
        ]
        
        st.write("Running basic-pitch with CoreML model (no pitch bend)...")
        st.write(f"Command: {' '.join(cmd)}")
        
        # List files before running
        files_before = list(out_dir.glob("*"))
        st.write(f"Files before: {[f.name for f in files_before]}")
        
        process = subprocess.run(cmd, check=False, capture_output=True, text=True)
        
        # Show command output for debugging
        st.write(f"Return code: {process.returncode}")
        if process.stdout:
            st.write(f"STDOUT:\n{process.stdout}")
        if process.stderr:
            st.write(f"STDERR:\n{process.stderr}")
        
        # List files after running
        files_after = list(out_dir.glob("*"))
        st.write(f"Files after: {[f.name for f in files_after]}")
        
        # Check if the command succeeded
        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, cmd, process.stdout, process.stderr)
        
        # Look for any MIDI files (try different patterns)
        midi_files = list(out_dir.glob("*.mid")) + list(out_dir.glob("*.midi"))
        st.write(f"Found MIDI files: {[f.name for f in midi_files]}")
        
        if midi_files:
            # Use the first MIDI file found
            source_midi = midi_files[0]
            if source_midi != midi_path:
                source_midi.rename(midi_path)
            return midi_path
        
        # If no MIDI file found, raise an error
        raise FileNotFoundError("No MIDI file generated by basic-pitch")
        
    except subprocess.CalledProcessError as e:
        st.error(f"Basic-pitch command failed: {e}")
        st.error(f"Error output: {e.stderr}")
        st.stop()
    except Exception as e:
        st.error(f"Audio transcription failed: {e}")
        st.stop()


def midi_to_score_pdf(midi_path: Path, out_dir: Path) -> Path | None:
    """Create a nicely engraved PDF score using music21 + LilyPond.
    Returns None if LilyPond not found."""
    try:
        score = converter.parse(midi_path)
        pdf_path = out_dir / "score.pdf"
        score.write("lily.pdf", fp=pdf_path)
        return pdf_path
    except Exception as e:
        st.warning(f"Could not generate PDF score: {e}")
        return None


def render_midi_to_wav(midi_path: Path, out_dir: Path) -> Path | None:
    if not SOUNDFONT.exists():
        st.warning("Sound‚Äëfont (.sf2) not found. Skipping audio rendering.")
        return None
    wav_path = out_dir / "render.wav"
    cmd = [
        "fluidsynth",
        "-ni",
        str(SOUNDFONT),
        str(midi_path),
        "-F",
        str(wav_path),
        "-r",
        "44100",
    ]
    subprocess.run(cmd, check=True)
    return wav_path


# ---------------------------------------------
# Streamlit UI
# ---------------------------------------------

st.set_page_config(page_title="Audio‚Äëto‚ÄëScore PlayStack", page_icon="üé∂")
st.title("üé∂ Audio‚Äëto‚ÄëScore PlayStack")
st.caption("From YouTube link or MP3 ‚ûú MIDI ‚ûú Score PDF ‚ûú Playback")

url = st.text_input("YouTube URL (leave blank to upload your own file)")
file = st.file_uploader("‚Ä¶or upload MP3 / WAV", type=["mp3", "wav"])

auto_start = st.button("Transcribe & Play")

if auto_start:
    with st.spinner("Working‚Ä¶ this can take up to a minute for long tracks"):
        with tempfile.TemporaryDirectory() as tmp_dir_str:
            tmp_dir = Path(tmp_dir_str)

            # 1) Acquire audio
            if url:
                st.write("üì• Downloading YouTube audio‚Ä¶")
                try:
                    audio_path = download_youtube(url, tmp_dir)
                except subprocess.CalledProcessError as e:
                    error_message = f"yt-dlp failed (exit code {e.returncode}). Is the link valid and yt-dlp installed?\n"
                    # Ensure e.output (stdout) and e.stderr are strings and not None
                    stdout_info = e.output if e.output is not None else ""
                    stderr_info = e.stderr if e.stderr is not None else ""
                    if stdout_info.strip(): # Only add if there's actual content
                        error_message += f"\n--- yt-dlp STDOUT ---\n{stdout_info.strip()}"
                    if stderr_info.strip(): # Only add if there's actual content
                        error_message += f"\n--- yt-dlp STDERR ---\n{stderr_info.strip()}"
                    st.error(error_message)
                    st.stop()
            elif file is not None:
                st.write("üì• Saving uploaded file‚Ä¶")
                suffix = Path(file.name).suffix or ".wav"
                audio_path = tmp_dir / f"upload{suffix}"
                audio_path.write_bytes(file.read())
            else:
                st.error("Please provide a YouTube URL or upload a file.")
                st.stop()

            # 2) Transcription
            st.write("üéß Transcribing audio ‚Üí MIDI (Basic Pitch)‚Ä¶")
            midi_path = transcribe_audio_to_midi(audio_path, tmp_dir)
            st.success("MIDI ready!")

            # 3) Score PDF
            st.write("üìÑ Engraving score‚Ä¶ (needs LilyPond)")
            pdf_path = midi_to_score_pdf(midi_path, tmp_dir)
            if pdf_path:
                st.download_button("Download score (PDF)", pdf_path.read_bytes(), "score.pdf")

            # 4) Render WAV for browser playback
            st.write("üîä Rendering audio‚Ä¶ (FluidSynth)")
            wav_path = render_midi_to_wav(midi_path, tmp_dir)
            if wav_path and wav_path.exists():
                wav_bytes = wav_path.read_bytes()
                st.audio(wav_bytes, format="audio/wav")
                st.download_button("Download instrumental (WAV)", wav_bytes, "instrumental.wav")
            else:
                st.info("You can still download the raw MIDI file below.")

            # 5) Always offer MIDI
            st.download_button("Download MIDI", midi_path.read_bytes(), "instrumental.mid")

st.sidebar.title("‚ÑπÔ∏è  Help")
st.sidebar.markdown(
    """
    **Setup tips**
    1. pip install streamlit basic_pitch music21 pyfluidsynth yt-dlp  
    2. Install lilypond and fluidsynth from your package manager.  
    3. Put a sound‚Äëfont (e.g., *FluidR3_GM.sf2*) next to *app.py* or set env var SOUNDFONT_PATH.  

    *If LilyPond / Fluidsynth aren't present, the app will still give you a MIDI file.*
    """
)